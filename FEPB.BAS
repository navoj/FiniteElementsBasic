100 REM 		   *** PROGRAM FEPB ***
105 REM 	   AUTHOR:
110 REM			      DAVID K. BROWN
112 REM		   DEPARTMENT OF MECHANICAL ENGINEERING
115 REM 		  UNIVERSITY OF GLASGOW
120 REM				SCOTLAND
125 REM 
126 REM 			JUNE 1989
127 REM			    (Version 8/06/89)
128 REM 	    (Compiles MS-DOS Turbo BASIC 1.0)
130 REM ** THE PROGRAM ALLOWS UP TO 20 ELEMENTS
131 REM    (OF 3 DIFFERENT TYPES)
132 REM    AND 60 NODES WITH A TOTAL OF
133 REM    120 DEGREES OF FREEDOM.	**
134 REM
135 REM ** THE ELEMENTS ARE RECTANGULAR **
136 REM 
137 REM ** FORCE AND MOMENT LOADS ARE APPLIED
138 REM    AT THE NODES AND THE BOUNDARIES ARE
139 REM    EITHER 'FIXED' OR 'FREE' (TO
140 REM    DISPLACE AND ROTATE).	**
145 REM
150 REM ** ALL ELEMENTS ARE ASSUMED TO HAVE 
155 REM THE SAME THICKNESS, ELASTIC MODULUS
160 REM AND POISSON'S RATIO
165 REM 
170 REM ** INPUT TO THE PROGRAM IS FROM
171 REM DATA FILE FEPB IN
172 REM
175 REM ** OUTPUT IS SENT TO DATA FILE FEPB.OUT
177 REM
178 REM
180 REM ** OUTPUT CONSISTS OF:
181 REM NODAL DISPLACEMENTS AND ROTATIONS,
182 REM ELEMENT MOMENTS MX, MY, MXY
183 REM AT THE QUARTER POINTS,
184 REM NODAL LOADS (WHICH INCLUDE
185 REM REACTION FORCES AND TORQUES).  **
190 REM
200 REM ** INITIALIZE PARAMETERS **
211 PN$ = "FEPB" : GOSUB 50110 : GOSUB 50120 : REM OPEN INFILE, OUTFILE
220 EX = 20 : NX = 60 : REM MAX # OF ELEMENTS AND MAX # OF NODES
230 TX = 3 : MX = 120 : REM MAX # OF TYPES AND MAX # OF DEGREES OF FREEDOM
240 PX = 3*NX
250 DIM A(12,12),B(12,12),TA(12,12),BDB(12,12)
260 DIM KL(12,12),P(PX),XL(4),YL(4)
270 DIM N(EX,4),RE(NX,3),PH(PX+2),MN(NX,3)
280 DIM X(NX),Y(NX),KS(MX,MX),TY(EX),R(PX)
290 DIM AH(TX,12,12),D(3,3),P1(12),KH(TX,12,12)
300 FOR I = 1 TO 12
310 P1(I) = 0
320 NEXT I
330 FOR I = 1 TO PX
340 PH(I) = 0 : P(I) = 0 : R(I) = 0
350 NEXT I
360 FOR I = 1 TO MX
370 FOR J = 1 TO MX
380 KS(I,J) = 0
390 NEXT J
400 NEXT I
410 GOSUB 50140 : PRINT "            LOADING DATA ...."
420 INPUT #2, NA$
430 P$ = " IDENTIFIER : " + NA$ : GOSUB 50100
450 IP = 2 : GOSUB 50060
460 REM ** READ IN DATA
470 INPUT #2, NN, NE
480 IF NE > EX THEN PRINT "TOO MANY ELEMENTS...>",EX : GOTO 4940
490 IF NN > NX THEN PRINT "TOO MANY NODES...>",NX : GOTO 4940
500 INPUT #2, TH, E, NU
510 P$ = "RUN OF PROGRAM " + PN$ : GOSUB 50000
520 IP = 3 : GOSUB 50060
530 P$ = "            *** DATA INPUT ***" : GOSUB 50000
540 IP = 2 : GOSUB 50060
550 P$ = "NUMBER OF NODES     = " + STR$(NN) : GOSUB 50000
560 P$ = "NUMBER OF ELEMENTS  = " + STR$(NE) : GOSUB 50000
570 P$ = "ALL ELEMENTS HAVE THE SAME: -" : GOSUB 50100
580 PB$ = "                             "
590 XS = TH : GOSUB 10000 : P$ = XS$
600 P$ = PB$ + "       THICKNESS         = " + P$ : GOSUB 50000
610 XS = E : GOSUB 10000 : P$ = XS$
620 P$ = PB$ + "       ELASTIC MODULUS   = " + P$ : GOSUB 50000
630 XS = NU : GOSUB 10000 : P$ = XS$
640 P$ = PB$ + "   AND POISSON'S RATIO   = " + P$ : GOSUB 50000
650 IP = 2 : GOSUB 50060
660 FOR I = 1 TO NE
670 FOR J = 1 TO 4
680 INPUT #2, N(I,J)
690 NEXT J
700 INPUT #2, TY(I)
710 IF TY(I) > TX THEN PRINT "ERROR - TYPE >";TX : GOTO 4940 : REM EXIT
720 NEXT I
730 P$ = "ELEMENT    N O D E S        TYPE" : GOSUB 50000
740 P$ = "  NO       1  2  3  4" : GOSUB 50100
750 FOR I = 1 TO NE
760 XA = I : GOSUB 30000 : P$ = " " + XA$
770 XA = N(I,1) : GOSUB 30000 : P$ = P$ + "    " + XA$
780 XA = N(I,2) : GOSUB 30000 : P$ = P$ + XA$
790 XA = N(I,3) : GOSUB 30000 : P$ = P$ + XA$
800 XA = N(I,4) : GOSUB 30000 : P$ = P$ + XA$
810 XA = TY(I) : GOSUB 30000 : P$ = P$ + "      " + XA$ : GOSUB 50000
820 NEXT I
830 IP = 2 : GOSUB 50060
840 FOR I = 1 TO NN
850 INPUT #2, X(I),Y(I)
860 NEXT I
870 FOR I = 1 TO NN
880 INPUT #2, RE(I,1),RE(I,2),RE(I,3)
890 INPUT #2, PH(3*I-2),PH(3*I-1),PH(3*I)
900 NEXT I
910 P$ = "NODE     C O O R D I N A T E S   "
920 P$ = P$ + "R E S T R A I N T S" : GOSUB 50000
930 P$ = " NO       X       Y        "
940 P$ = P$ + "W     ANGLE X ANGLE Y" : GOSUB 50100
950 FOR I = 1 TO NN
960 XA = I : GOSUB 30000 : P$ = XA$ + "    "
970 XS = X(I) : GOSUB 10000 : P$ = P$ + XS$
980 XS = Y(I) : GOSUB 10000 : P$ = P$ + XS$
990 P$ = P$ + "     "
1000 FOR J = 1 TO 3 : P$ = P$ + STR$(RE(I,J)) + "                  " : NEXT J
1010 GOSUB 50000
1020 NEXT I
1030 IP = 2 : GOSUB 50060
1040 P$ = "NODE        A P P L I E D   L O A D S" : GOSUB 50000
1050 P$ = " NO         PZ          TX          TY" : GOSUB 50100
1060 FOR I = 1 TO NN
1070 P$ = ""
1080 FOR J = -2 TO 0
1090 XS = PH(3*I + J) : GOSUB 10000 : P$ = P$ + XS$
1100 NEXT J
1110 XA = I : GOSUB 30000 : P$ = XA$ + "     " + P$ : GOSUB 50000
1120 NEXT I
1130 IP = 2 : GOSUB 50060
1140 GOSUB 50140 : FOR I = 1 TO 3 : PRINT : NEXT
1150 PRINT "            PROGRAM "; PN$;" IS NOW RUNNING"
1160 IN = 0
1170 FOR I = 1 TO NN
1180 FOR J = 1 TO 3
1190 IF RE(I,J) = 1 THEN 1220
1200 IN = IN + 1
1210 MN(I,J) = IN
1220 NEXT J
1230 NEXT I
1240 MK = IN
1250 P$ = "TOO MANY DEGREES OF FREEDOM"
1260 IF MK > MX THEN GOSUB 50000 : GOTO 4940
1270 REM ** SCAN THROUGH EACH ELEMENT, FIND ITS
1280 REM STIFFNESS MATRIX AND LODGE IT INTO 
1290 REM THE STRUCTURE STIFFNESS MATRIX **
1300 FOR NI = 1 TO NE
1310 T = TY(NI)
1320 IF NI = 1 THEN GOTO 1400
1330 FOR I = 1 TO NI - 1 : IF T = TY(I) THEN GOTO 1360
1340 NEXT I
1350 GOTO 1400
1360 P$ = "ELEMENT" + STR$(NI) + " IS TYPE" + STR$(T)
1370 P$ = P$ + " - STIFFNESS MATRIX ALREADY FOUND" : GOSUB 50000
1380 GOTO 2990
1390 REM ** INITIALIZE ARRAYS **
1400 FOR I = 1 TO 12
1410 FOR J = 1 TO 12
1420 A(I,J) = 0
1430 B(I,J) = 0
1440 BDB(I,J) = 0
1450 TA(I,J) = 0
1460 KL(I,J) = 0
1470 NEXT J
1480 NEXT I
1490 REM ** EVALUATE MATRIX [BDB],
1500 REM ** FIND LOCAL COORDS OF ELEMENT NODES **
1510 N1 = N(NI,1)
1520 N2 = N(NI,2)
1530 N3 = N(NI,3)
1540 N4 = N(NI,4)
1550 XM = (X(N1) + X(N2) + X(N3) + X(N4))/4
1560 YM = (Y(N1) + Y(N2) + Y(N3) + Y(N4))/4
1570 FOR I = 1 TO 4
1580 NL = N(NI,I)
1590 XL(I) = X(NL) - XM
1600 YL(I) = Y(NL) - YM
1610 NEXT I
1620 X1 = XL(1)
1630 X2 = XL(2)
1640 Y1 = YL(1)
1650 Y4 = YL(4)
1660 AL = ABS((X1 - X2)/2)
1670 BL = ABS((Y1 - Y4)/2)
1680 BDB(4,4) = 4
1690 BDB(4,6) = 4*NU
1700 BDB(5,5) = 2*(1 - NU)
1710 BDB(5,11) = 2*(1 - NU)*AL*AL
1720 BDB(5,12) = 2*(1 - NU)*BL*BL
1730 BDB(6,6) = 4
1740 BDB(7,7) = 12*AL*AL
1750 BDB(7,9) = 4*NU*AL*AL
1760 BDB(8,8) = 4*BL*BL/3 + 8*(1-NU)*AL*AL/3
1770 BDB(8,10) = 4*NU*BL*BL
1780 BDB(9,9) = 4*AL*AL/3 + 8*(1-NU)*BL*BL/3
1790 BDB(10,10) = 12*BL*BL
1800 BDB(11,11) = 4*AL*AL*BL*BL + 18*(1-NU)*AL^4/5
1810 BDB(11,12) = 2*(1+NU)*AL*AL*BL*BL
1820 BDB(12,12) = 4*AL*AL*BL*BL + 18*(1-NU)*BL^4/5
1830 BDB(6,4) = BDB(4,6)
1840 BDB(11,5) = BDB(5,11)
1850 BDB(12,5) = BDB(5,12)
1860 BDB(9,7) = BDB(7,9)
1870 BDB(10,8) = BDB(8,10)
1880 BDB(12,11) = BDB(11,12)
1890 MLT = E*TH*TH*TH*4*AL*BL/12/(1-NU*NU)
1900 FOR I = 1 TO 12
1910 FOR J = 1 TO 12
1920 BDB(I,J) = MLT*BDB(I,J)
1930 NEXT J
1940 NEXT I
1950 REM ** EVALUATE MATRIX [A]
1960 FOR II = 1 TO 4
1970 I = 3*II - 2
1980 XI = XL(II) 
1990 YI = YL(II)
2000 A(I,1) = 1
2010 A(I,2) = XI
2020 A(I,3) = YI
2030 A(I,4) = XI*XI
2040 A(I,5) = XI*YI
2050 A(I,6) = YI*YI
2060 A(I,7) = XI*XI*XI
2070 A(I,8) = XI*XI*YI
2080 A(I,9) = XI*YI*YI
2090 A(I,10) = YI*YI*YI
2100 A(I,11) = XI*XI*XI*YI
2110 A(I,12) = XI*YI*YI*YI
2120 I = I + 1
2130 A(I,2) = -1
2140 A(I,4) = -2*XI
2150 A(I,5) = -YI 
2160 A(I,7) = -3*XI*XI
2170 A(I,8) = -2*XI*YI
2180 A(I,9) = -2*XI*YI
2190 A(I,11) = -3*XI*XI*YI
2200 A(I,12) = -YI*YI*YI
2210 I = I + 1
2220 A(I,3) = 1
2230 A(I,5) = XI 
2240 A(I,6) = 2*YI
2250 A(I,8) = XI*XI
2260 A(I,9) = 2*XI*YI
2270 A(I,10) = 3*YI*YI
2280 A(I,11) = XI*XI*XI
2290 A(I,12) = 3*XI*YI*YI
2300 NEXT II
2310 FOR I = 1 TO 12
2320 B(I,I) = 1
2330 NEXT I
2340 REM ** FIND THE INVERSE OF [A] AND LOCATE
2350 REM    IT BACK IN [A]. STORE IT IN [AH]. **
2360 P$ = "MATRIX INVERSION" : GOSUB 50000




