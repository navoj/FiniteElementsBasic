100 REM		*** PROGRAM PLFRAME ***
105 REM     AUTHOR :
110 REM		DAVID K. BROWN
112 REM		DEPARTMENT OF MECHANICAL ENGINEERING
115 REM 	UNIVERSITY OF GLASGOW
120 REM			SCOTLAND
125 REM			JUNE 1989
126 REM		(VERSION 8/06/89)
127 REM		(COMPILES MS-DOS TURBO BASIC 1.0)
128 REM
130 REM ** THE PROGRAM WILL ANALYZE PLANE FRAME
131 REM    PROBLEMS WITH UP TO 40 NODES,
132 REM    40 MEMBERS AND 120 DEGREES OF FREEDOM.
133 REM    LOADING IS APPLIED THROUGH
134 REM    NODAL FORCES AND MOMENTS.            **
135 REM
140 REM ** FOUR TYPES OF MEMBERS ARE PERMITTED
150 REM    DEPENDING ON END CONDITIONS:
160 REM  	TYPE 0 - FIXED/FIXED
170 REM		TYPE 1 - PINNED/FIXED
180 REM		TYPE 2 - FIXED/PINNED
190 REM		TYPE 3 - PINNED/PINNED
200 REM ** BOUNDARY CONDITIONS CAN BE FIXED (U=V=ANGLE=0)
201 REM    OR PINNED (U=V=0) OR A COMBINATION
202 REM    OF PINS AND ROLLERS.  			**
205 REM
210 REM ** INPUT TO THE PROGRAM IS FROM DATA FILE PLFRAME.IN
211 REM
212 REM    OUTPUT IS SENT TO DATA FILE PLFRAME.OUT      **
215 REM
220 REM ** OUTPUT CONSISTS OF:
221 REM      NODAL DISPLACEMENTS U,V AND ROTATION,
222 REM      FORCES (X,Y) AND MOMENT AT EACH END
223 REM      OF EACH MEMBER AND NODAL FORCES
224 REM      (INCLUDING REACTIONS) AT EACH NODE 	**
225 REM
226 PN$ = "PLFRAME" : GOSUB 50110 : GOSUB 50120 : REM OPNE IN,OUTFILES
227 GOSUB 50140 : REM CLEARSCREEN
228 PRINT "          PLEASE WAIT ..... LOADING DATA"
229 INPUT #2, NA$
230 P$ = " IDENTIFIER : " + NA$ : GOSUB 50000
231 IP = 2 : GOSUB 50060
240 NX = 40 : REM MAX. NO OF NODES = 40
250 MX = 40 : REM MAX. NO OF MEMBERS = 40
260 NF = 3*NX : REM MAX # OF DEGREES OF FREEDOM
270 DIM X(NX),Y(NX),RE(NX,3),NJ(MX,2),MT(MX),MI(MX)
280 DIM A(MX),E(MX),QL(MX),T(6,6),U(6,6),KL(6,6)
290 DIM KG(6,6),KS(NF,NF),P(NF+2),PH(NF),ER(6)
300 DIM KH(MX,6,6),MN(NX,3)
310 BL$ = "                "
320 FOR I = 1 TO NF : FOR J = 1 TO NF : KS(I,J) = 0 : NEXT J : NEXT I
330 REM DATA READ IN FROM DATA FILE PN$+".IN"
340 INPUT #2, NN, NM
350 FOR I = 1 TO NN
360 INPUT #2, N, X(I),Y(I),RE(I,1),RE(I,2),RE(I,3)
370 INPUT #2, P(3*I-2),P(3*I-1),P(3*I) : NEXT I
380 FOR I = 1 TO NM
390 INPUT #2, N, NJ(I,1),NJ(I,2),MT(I),MI(I),A(I),E(I)
400 NEXT I
410 P$ = "PROGRAM " + PN$ : GOSUB 50000 : IP = 3 : GOSUB 50060
420 P$ = "                    *** DATA INPUT ***"
430 GOSUB 50000 : IP = 2 : GOSUB 50060
440 P$ = "NUMBER OF NODES = " + STR$(NN) : GOSUB 50000
450 P$ = "NUMBER OF MEMBERS = " + STR$(NM) : GOSUB 50000
460 IP = 3 : GOSUB 50060
470 P$ = " *  NODAL DATA  * " : GOSUB 50000 : IP = 3 : GOSUB 50060
480 FW = 12 : NS = 3
490 REM   **  VALUES FOR FORMATTING SUBROUTINE -
500 REM       FW MUST BE >= NS + 7
510 S1$ = LEFT$(BL$,FW -1) : S2$ = LEFT$(BL$,3*FW - 25)
520 S3$ = LEFT$(BL$,FW-5 )
530 P$ = "NODE     COORDINATES" + S2$
540 P$ = P$ + "R E S T R A I N T S" : GOSUB 50100
550 P$ = " NO     X" + S1$ + "Y" + S1$ + "U"
560 P$ = P$ + S1$ + "V" + S3$ + "A N G L E" : GOSUB 50100
570 FOR I = 1 TO NN
580 XA = I : GOSUB 30000 : P$ = XA$ + " "
590 XS = X(I) : GOSUB 10040 : P$ = P$ + XS$
600 XS = Y(I) : GOSUB 10040 : P$ = P$ + XS$
610 P$ = P$ + "   "
620 FOR J = 1 TO 3
630 XA = RE(I,J) : GOSUB 30000 : P$ = P$ + XA$ + "        "
640 NEXT J
650 GOSUB 50000
660 NEXT I
670 IP = 3 : GOSUB 50060 : P$ = "* MEMBER DATA *" : GOSUB 50100
680 FW = 12 : NS = 3 : REM VALUES FOR OUTPUT FORMATTING
690 P$ = "MEMBER END NODES  MEMBER    2ND"
700 P$ = P$ + " MOMT    SECTN    ELASTIC" : GOSUB 50000
710 P$ = "  NO    I     J     TYPE     OF"
720 P$ = P$ + " AREA     AREA     MODULUS" : GOSUB 50100
730 B$ = "    "
740 FOR I = 1 TO NM
750 XA = I : GOSUB 30000 : P$ = XA$ + "   "
760 XA = NJ(I,1) : GOSUB 30000 : P$ = P$ + XA$ + "    "
770 XA = NJ(I,2) : GOSUB 30000 : P$ = P$ + XA$ + "     "
780 XA = MT(I) : GOSUB 30000 : P$ = P$ + XA$ + "     "
790 XS = MI(I) : FW = 11 : NS = 3 : GOSUB 10040 : P$ = P$ + XS$
800 XS = A(I) : GOSUB 10040 : P$ = P$ + XS$
810 XS = E(I) : GOSUB 10040 : P$ = P$ + XS$ : GOSUB 50000
820 NEXT I
830 GOSUB 50040 : P$ = "* APPLIED NODAL FORCES *" : GOSUB 50100
840 FW = 12 : NS = 3
850 P$ = "NODE      F  O  R  C  E  S       MOMENT" : GOSUB 50100
860 P$ = " NO         X           Y           M" : GOSUB 50000
870 FOR I = 1 TO NN
880 XA = I : GOSUB 30000 : P$ = XA$ + "     "
890 XS = P(3*I - 2) : GOSUB 10000 : P$ = P$ + XS$
900 XS = P(3*I - 1) : GOSUB 10000 : P$ = P$ + XS$
910 XS = P(3*I) : GOSUB 10000 : P$ = P$ + XS$ : GOSUB 50000
920 NEXT I
930 IP = 5 : GOSUB 50060
940 REM
950 GOSUB 50140 : FOR I = 1 TO 5 : PRINT : NEXT I
960 PRINT "            PROGRAM "; PN$ ;" IS NOW RUNNING"
970 IN = 0 : FOR I = 1 TO NN : FOR J = 1 TO 3
980 IF RE(I,J) = 1 THEN GOTO 1000
990 IN = IN + 1 : MN(I,J) = IN
1000 NEXT J
1010 NEXT I
1020 MK = IN
1030 IF IN > 1 THEN GOTO 1070
1040 PRINT "PROGRAM WILL NOT RUN WITH ONLY"
1050 PRINT "   ONE UNKNOWN DISPLACEMENT"
1060 P$ = " !! RUN OF " + PN$ + " ABORTED !!" : GOSUB 50000 : GOTO 3030
1070 REM   **  CONDENSED STRUCTURAL STIFFNESS MATRIX
1080 REM       IS MK X MK IN SIZE.                 **
1090 REM   **  NOW SCAN THROUGH ALL MEMBERS        **
1100 FOR IJK = 1 TO NM
1110 FOR I = 1 TO 6 : FOR J = 1 TO 6
1120 T(I,J) = 0 : KL(I,J) = 0 : KG(I,J) = 0 : U(I,J) = 0
1130 NEXT J
1140 NEXT I
1150 REM   ** DETERMINE TRANSFORMATION MATRIX [T] **
1160 II = NJ(IJK,1)
1170 JJ = NJ(IJK,2)
1180 XI = X(II) : XJ = X(JJ)
1190 YI = Y(II) : YJ = Y(JJ)
1200 QL(IJK) = SQR((XJ - XI)^2 + (YJ - YI)^2)
1210 CX = (XJ - XI)/QL(IJK) : CY = (YJ - YI)/QL(IJK)
1220 T(1,1) = CX : T(1,2) = CY : T(2,1) = -CY : T(2,2) = CX
1230 T(3,3) = 1 : T(4,4) = CX : T(4,5) = CY : T(5,4) = -CY
1240 T(5,5) = CX : T(6,6) = 1
1250 REM   ** DETERMINE MEMBER LOCAL STIFFNESS
1260 REM      MATRIX [KL] DEPENDING ON
1270 REM      MEMBER TYPE MT = 0,1,2, OR 3.   **
1280 C1 = 2*E(IJK)*MI(IJK)/QL(IJK)
1290 C2 = 3*C1/QL(IJK)
1300 C3 = 2*C2/QL(IJK)
1310 C4 = E(IJK)*A(IJK)/QL(IJK)
1320 C5 = 1.5*C1
1330 C6 = .5*C2
1340 C7 = C6/QL(IJK)
1350 KL(1,1) = C4 : KL(1,4) = -C4 : KL(4,1) = -C4
1360 KL(4,4) = C4
1370 IF MT(IJK) = 3 THEN GOTO 1540
1380 IF MT(IJK) > 0 THEN GOTO 1440
1390 KL(2,2) = C3 : KL(3,2) = C2 : KL(5,2) = -C3 : KL(6,2) = C2
1400 KL(2,3) = C2 : KL(3,3) = 2*C1 : KL(5,3) = -C2 : KL(6,3) = C1
1410 KL(2,5) = -C3 : KL(3,5) = -C2 : KL(5,5) = C3 : KL(6,5) = -C2
1420 KL(2,6) = C2 : KL(3,6) = C1 : KL(5,6) = -C2 : KL(6,6) = 2*C1
1430 GOTO 1540
1440 KL(2,2) = C7 : KL(5,2) = -C7
1450 KL(2,5) = -C7 : KL(5,5) = C7
1460 IF MT(IJK) = 2 THEN GOTO 1500
1470 KL(2,6) = C6 : KL(6,2) = C6 : KL(6,6) = C5
1480 KL(5,6) = -C6 : KL(6,5) = -C6
1490 GOTO 1540
1500 KL(2,3) = C6 : KL(3,3) = C5 : KL(5,3) = -C6
1510 KL(3,2) = C6 : KL(3,5) = -C6
1520 REM   **  CALCULATE MEMBER GLOBAL STIFFNESS
1530 REM       MATRIX [KG] FROM TRIPLE PRODUCT. **
1540 FOR I = 1 TO 6 : FOR J = 1 TO 6 : FOR L = 1 TO 6
1550 U(I,J) = U(I,J) + KL(I,L)*T(L,J)
1560 NEXT L : NEXT J : NEXT I
1570 FOR I = 1 TO 6 : FOR J = 1 TO 6 : FOR L = 1 TO 6
1580 KG(I,J) = KG(I,J) + T(L,I)*U(L,J)
1590 NEXT L : NEXT J : NEXT I
1600 REM   ** STORE MEMBER STIFFNESS
1610 REM      MATRIX [KG] IN [KH].   **
1620 FOR I = 1 TO 6 : FOR J = 1 TO 6
1630 KH(IJK,I,J) = KG(I,J)
1640 NEXT J : NEXT I
1650 REM   **  LOCATE STIFFNESS MATRIX COEFFICIENTS
1660 REM       IN STRUCTURAL STIFFNESS MATRIX [KS] **
1670 FOR I = 1 TO 2 : ND = NJ(IJK,I) : IS = 3*I-2
1680 FOR L = 1 TO 3 : IF RE(ND,L) = 1 THEN GOTO 1760
1690 PK = MN(ND,L)
1700 FOR J = 1 TO 2 : JS = 3*J-2 : NC = NJ(IJK,J)
1710 FOR M = 1 TO 3 : IF RE(NC,M) = 1 THEN GOTO 1740
1720 PL = MN(NC,M)
1730 KS(PK,PL) = KS(PK,PL) + KG(IS+L-1,JS+M-1)
1740 NEXT M
1750 NEXT J
1760 NEXT L
1770 NEXT I
1780 NEXT IJK
1790 REM   **  BUILD UP UNCONDENSED LOAD VECTOR
1800 REM       FROM DATA, THEN CONDENSE INTO [P]   **
1810 OT = 0
1820 FOR I = 1 TO NN : FOR J = 1 TO 3
1830 IF RE(I,J) = 0 THEN GOTO 1870
1840 FOR M = 3*I-(3-J)-OT TO 3*NN - OT + 1
1850 P(M) = P(M+1)
1860 NEXT M : OT = OT + 1
1870 NEXT J : NEXT I
1880 REM   **  SOLVE FOR UNKNOWN DISPLACEMENTS
1890 REM       AND STORE IN [P].                   **
1900 M = 3*NN - OT : M1 = M - 1
1910 FOR I = 1 TO M1 : L = I + 1
1920 FOR J = L TO M
1930 IF KS(J,I) = O THEN GOTO 1980
1940 FOR KK = L TO M
1950 KS(J,KK) = KS(J,KK) - KS(I,KK)*KS(J,I)/KS(I,I)
1960 NEXT KK
1970 P(J) = P(J) - P(I)*KS(J,I)/KS(I,I)
1980 NEXT J
1990 NEXT I
2000 P(M) = P(M) / KS(M,M)
2010 FOR I = 1 TO M1 : KK = M - I : L = KK + 1
2020 FOR J = L TO M
2030 P(KK) = P(KK) - P(J) * KS(KK,J)
2040 NEXT J
2050 P(KK) = P(KK) / KS(KK,KK)
2060 NEXT I
2070 IP = 3 : GOSUB 50060
2080 P$ = " IDENTIFIER : " + NA$ : GOSUB 50000
2090 P$ = "                     *** OUTPUT OF RESULTS ***"
2100 GOSUB 50000
2110 FOR I = 1 TO 30 : PH(I) = 0 : NEXT I
2120 IN = 0
2130 FOR I = 1 TO NN : FOR J = 1 TO 3
2140 IF RE(I,J) = 1 THEN GOTO 2160
2150 IN = IN + 1 : PH(3*I-3+J) = P(IN)
2160 NEXT J : NEXT I
2170 IP = 3 : GOSUB 50060
2180 FW = 15 : NS = 3
2190 P$ = "* VECTOR OF ALL DISPLACEMENTS *" : GOSUB 50100
2200 P$ = "NODE         DISPLACEMENTS              ROTATION"
2210 GOSUB 50000
2220 P$ = " NO         U              V             ANGLE"
2230 GOSUB 50100
2240 FOR I = 1 TO NN
2250 XA = I : GOSUB 30000 : P$ = XA$ + "   "
2260 XS = PH(3*I-2) : GOSUB 10040 : P$ = P$ + XS$
2270 XS = PH(3*I-1) : GOSUB 10040 : P$ = P$ + XS$
2280 XS = PH(3*I) : GOSUB 10040 : P$ = P$ + XS$ : GOSUB 50000
2290 NEXT I
2300 REM   **  SCAN THROUGH ALL MEMBERS AND
2310 REM       CALCULATE APPLIED FORCES AND MOMENTS
2320 REM       AT THE END OF EACH MEMBER.          **
2330 REM
2340 REM   **  NOTE : DISPLACEMENTS ARE NOW        **
2350 REM       HELD IN VECTOR [P].                 **
2360 IP = 2 : GOSUB 50060
2370 P$ = "* MEMBER END FORCES W.R.T. GLOBAL COORDS *" : GOSUB 50100
2380 P$ = "MEMBER NODE  F O R C E S MOMENT" : GOSUB 50000
2390 P$ = "  NO    NO  X            Y   M" : GOSUB 50100
2410 FOR IJK = 1 TO NM
2420 FOR I = 1 TO 2 : NB = NJ(IJK, I)
2430 FOR J = 1 TO 3
2440 P(3*I - 3 + J) = PH(3*NB - 3 + J)
2450 NEXT J
2460 NEXT I
2470 FOR I = 1 TO 6 : ER(I) = 0 : NEXT I
2480 FOR I = 1 TO 6 : FOR J = 1 TO 6
2490 ER(I) = ER(I) + KH(IJK,I,J) * P(J)
2500 NEXT J : NEXT I
2510 FW = 15 : NS = 3
2520 FOR J = 1 TO 2
2530 XA = IJK : GOSUB 30000 : P$ = XA$ + "   "
2540 XA = NJ(IJK,J) : GOSUB 30000 : P$ = P$ + XA$ + "   "
2550 XS = ER(3*J - 2) : GOSUB 10040 : P$ = P$ + XS$
2560 XS = ER(3*J - 1) : GOSUB 10040 : P$ = P$ + XS$
2570 XS = ER(3*J) : GOSUB 10040 : P$ = P$ + XS$ : GOSUB 50000
2580 NEXT J
2590 GOSUB 50040
2600 NEXT IJK
2610 REM   **  BUILD UP STRUCTURE UNCONDENSED
2620 REM       STIFFNESS MATRIX AND HOLD IN [KS]. **
2630 FOR I = 1 TO NF : FOR J = 1 TO NF
2640 KS(I,J) = 0
2650 NEXT J
2660 NEXT I
2670 FOR IJK = 1 TO NM
2680 FOR I = 1 TO 2 : I1 = 3*NJ(IJK,I) - 2 : IS = 3*I - 2
2690 FOR L = 0 TO 2 : FOR J = 1 TO 2
2700 J1 = 3*NJ(IJK,J) - 2 : JS = 3*J - 2
2710 FOR M = 0 TO 2
2720 KS(I1 + L, J1 + M) = KS(I1 + L, J1 + M) + KH(IJK,IS+L,JS+M)
2730 NEXT M
2740 NEXT J : NEXT L
2750 NEXT I
2760 NEXT IJK
2770 FOR I = 1 TO 30 : P(I) = 0 : NEXT I
2780 REM  **  MULTIPLY [KS] BY VECTOR OF ALL NODAL
2790 REM      DISPLACEMENTS [PH] TO DETERMINE
2800 REM      NODAL FORCES AND THUS CHECK AGAINST
2810 REM      APPLIED LOADS AND FIND BOUNDARY
2820 REM      REACTION FORCES.                       **
2830 FOR I = 1 TO 3*NN : FOR J = 1 TO 3*NN
2840 P(I) = P(I) + KS(I,J)*PH(J)
2850 NEXT J : NEXT I
2860 IP = 2 : GOSUB 50060
2870 P$ = "* NODAL LOADS W.R.T. GLOBAL COORDS *" : GOSUB 50100
2880 P$ = "NODE          F O R C E S             MOMENT" : GOSUB 50100
2890 P$ = " NO        X              Y              M" : GOSUB 50000
2900 FW = 15 : NS = 3
2910 FOR J = 1 TO NN
2920 XA = J : GOSUB 30000 : P$ = XA$ + " "
2930 FOR I = 1 TO 3
2940 XS = P(3*J - 3 + I) : GOSUB 10040 : P$ = P$ + XS$
2950 NEXT I
2960 GOSUB 50100
2970 NEXT J
2980 GOSUB 50140
2990 PRINT "SOLUTION COMPLETED";
3000 PRINT "INSPECT OR PRINT OUTPUT FILE " + PN$ + ".OUT"
3010 P$ = "             **** END OF RUN OF PROGRAM " + PN$ + " ****"
3020 GOSUB 50000 : IP = 5 : GOSUB 50060
3030 GOSUB 50130
3040 END
3050 REM ***********************************************************
10000 REM                  FORMATTING AND INPUT/OUTPUT
10004 REM  			 SUBROUTINES BY
10008 REM		           D.A. PIRIE
10012 REM 		DEPARTMENT OF AEROSPACE ENGINEERING
10016 REM		      UNIVERSITY OF GLASGOW
10020 REM			    SCOTLAND
10024 REM			   MAY 1989
10028 REM
10032 REM  ** FORMAT NUMERICAL OUTPUT IN SCIENTIFIC NOTATION **
10036 FW = 12 : NS = 4 : REM DEFAULT VALUES
10040 WE = 1E-30 : REM ANYTHING SMALLER TAKEN AS ZERO
10050 XA = XS : GOSUB 30010 : XS$ = XA$
10060 KE = 0 : KE$ = "" : BL$ = "        " : B0$ = "00000000"
10070 F5 = FW - NS - 5 : N3 = NS + 3 : Z$ = "0." : AX = ABS(XS)
10080 IF AX < WE THEN XS$ = LEFT$(BL$,F5) + Z$ + LEFT$(BL$,N3) : GOTO 10130
10090 LX = LEN(XS$) : L3 = LX - 3 : XA = XS
10100 IF LX > 5 THEN IF MID$(XS$,L3,1) = "E" THEN GOSUB 10400
10110 IF ABS(XS) < 1 OR ABS(XS) >= 10 THEN GOSUB 10240
10120 GOSUB 10140
10130 RETURN
10140 REM FORM OUTPUT$
10150 GOSUB 10200
10160 IF ABS(XS) >= 10 THEN GOSUB 10240
10170 GOSUB 10280
10180 GOSUB 10330
10190 RETURN
10200 REM ROUNDOFF MANTISSA
10210 XR = 5 : FOR I5 = 1 TO NS : XR = XR/10 : NEXT I5
10220 XS = XS + XR*SGN(XS)
10230 RETURN
10240 REM NORMALISE MANTISSA
10250 IF ABS(XS) < 1 THEN XS = XS * 10 : KE = KE - 1 : GOTO 10250
10260 IF ABS(XS) >= 10 THEN XS = XS / 10 : KE = KE + 1 : GOTO 10260
10270 RETURN
10280 REM FORM EXPONENT$
10290 S$ = "+" : IF KE < 0 THEN S$ = "-"
10300 XA = KE : GOSUB 30010 : KE$ = XA$
10310 KE$ = S$ + RIGHT$("0" + MID$(KE$,2),2)
10320 RETURN
10330 REM FORM(MANTISSA + EXPONENT)$
10340 XA = XS : GOSUB 30010 : XS$ = XA$
10350 X1$ = LEFT$(XS$,NS+2)
10360 XS$ = X1$ : IF LEN(X1$) < NS + 2 THEN XS$ = X1$ + LEFT$(B0$,NS+2-LEN(X1$))
10370 IF XS = INT(XS) THEN XS$ = X1$ + "." + LEFT$(B0$,NS-1)
10380 XS$ = LEFT$(BL$,FW-NS-6)+XS$+"E"+KE$
10390 RETURN
10400 REM
10410 KE = VAL(RIGHT$(XS$,3)) : XS = VAL(LEFT$(XS$,LEN(XS$)-4)):RETURN
10420 REM
20000 REM   **  FORMAT NUMERICAL OUTPUT              **
20010 REM
20020 REM
20030 FW = 12 : NS = 3 : REM DEFAULT VALUES
20040 BL$ = "                  "
20050 IF FW - NS < 7 THEN PRINT "FIELD WIDTH TOO SMALL OR TOO MANY SIGFIGS"
20060 XE$ = "      " : XA = XS : GOSUB 30010 : XS$ = XA$
20070 IF ABS(XS) >= 10^(8 - NS) THEN XX = XS : GOTO 20090
20080 GOSUB 20210
20090 IF LEN(XS$)>5 THEN IF MID$(XS$,LEN(XS$)-3,1) = "E" THEN GOSUB 20190
20100 XA = XX : GOSUB 30010 : XX$ = XA$
20110 FOR J5 = 1 TO LEN(XX$)
20120 IF MID$(XX$,J5,1) = "." THEN DP = J5 : GOTO 20140
20130 NEXT J5 : DP = LEN(XX$) + 1 : XX$ = XX$ + "."
20140 XX$ = XX$ + "0000000" : XS$ = LEFT$(XX$,DP+NS) + XE$
20150 LX = LEN(XS$) : IF LX >= FW THEN XS$ =" " + LEFT$(XS$,FW-1):GOTO 20170
20160 XS$ = LEFT$(BL$,FW-LX) + XS$
20170 RETURN
20180 REM SEPARATE MANTISSA, EXPONENT$
20190 XE$ = RIGHT$(XS$,4) : XS = VAL(LEFT$(XS$,LEN(XS$)-4))
20200 GOSUB 20210 : RETURN
20210 REM ROUND-OFF TO NS DECIMAL PLACES
20220 XX = XS + .5*SGN(XS)/10^NS : RETURN
30000 GOSUB 30010 : GOSUB 30060 : RETURN
30010 REM *FIX FOR BASIC(EG APPLE) WHICH STRIP LEADING BLANK FROM
30020 REM  STR$(NON-NEGATIVE NUMBER) *
30030 XA$ = STR$(XA) : X1$ = LEFT$(XA$,1)
30040 IF X1$ <> " " AND X1$ <> "-" THEN XA$ = " " + XA$
30050 RETURN
30060 REM * RIGHT-JUSTIFY INTEGERS<=99
30070 XA$ = RIGHT$(" " + XA$,3)
30080 RETURN
30090 REM ********************************************
50000 REM ** THE FOLLOWING STATEMENTS
50010 REM    ARE SPECIFIC TO MS-DOS
50020 REM        TURBO BASIC
50030 PRINT #3, P$ : RETURN : REM ** PRINTLINE ON OUTPUTFILE **
50040 PRINT #3, : RETURN : REM ** 1 NEWLINE ON OUTPUTFILE *
50050 REM
50060 FOR KP = 1 TO IP : REM DO IP
50070 PRINT #3, : REM NEWLINES
50080 NEXT KP : REM ON
50090 RETURN : REM OUTPUT FILE *
50100 GOSUB 50000 : GOSUB 50040 : RETURN : REM PRINTLINE + NEWLINE
50110 OPEN PN$ + ".IN" FOR INPUT AS #2 : RETURN : REM ** OPEN INFILE **
50120 OPEN PN$ + ".OUT" FOR OUTPUT AS #3 : RETURN : REM ** OPEN OUTFILE **
50130 CLOSE #2,#3 : RETURN : REM CLOSE INFILE & OUTFILE
50140 CLS : RETURN : REM CLEARSCREEN






