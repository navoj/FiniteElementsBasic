100 REM 		*** PROGRAM FEPCST ***
105 REM		AUTHOR:
110 REM 		DAVID K. BROWN
112 REM		DEPARTMENT OF MECHANICAL ENGINEERING
115 REM		    UNIVERSITY OF GLASGOW
120 REM			SCOTLAND
125 REM		    JUNE 1989
126 REM		(VERSION 8/06/89)
127 REM		(COMPILES MS-DOS TURBO BASIC 1.0)
128 REM
130 REM ** PROGRAM WILL ANALYSE PLANE STRESS OR
132 REM	   PLANE STRAIN PROBLEMS WITH UP TO
134 REM    40 ELEMENTS, 30 NODES AND 60 DEGREES
135 REM    OF FREEDOM USING CONSTANT STRAIN
136 REM    TRIANGLES (CST).                       **
137 REM
138 REM ** LOADING IS APPLIED THROUGH NODAL
139 REM    FORCES. BOUNDARY DISPLACEMENTS
140 REM    ARE EITHER ZERO OR FREE.               **
145 REM
150 REM ** INPUT IS VIA DATA FILE "FEPCST.IN"
152 REM    OUTPUT IS SENT TO DATA FILE "FEPCST.OUT"
154 REM                                           **
156 REM
158 REM ** OUTPUT CONSISTS OF:
160 REM 	NODAL DISPLACEMENTS U AND V,
165 REM		ELEMENT STRESSES AND
170 REM 	NODAL FORCES.                     **
174 REM
177 PN$ = "FEPCST" : GOSUB 50110 : GOSUB 50120 : REM OPEN INFILE, OUTFILE
180 EX = 40 : NX = 30 : REM MAX # OF ELEMENTS & MAX # OF NODES
190 NF = 2*NX : REM MAX # OF DEGREES OF FREEDOM
200 DIM X(NX),Y(NX),RE(NX,2),NJ(EX,3),T(EX),E(EX),NU(EX)
210 DIM P(NF),B(3,6),D(3,3),ST(EX,3,6),PH(NF)
220 DIM KL(6,6),KS(NF,NF),KH(EX,6,6),MN(NX,2),SS(3)
300 GOSUB 50140 : PRINT "LOADING DATA ..."
310 INPUT #2, NA$
320 P$ = " IDENTIFIER : " + NA$ : GOSUB 50100
340 P$ = " PROGRAM " + PN$ : GOSUB 50000
350 S1$ = "         " : REM 9 SPACES
360 S2$ = "           " : REM 11 SPACES
370 FOR I = 1 TO NF : FOR J = 1 TO NF : KS(I,J) = 0 : NEXT J : NEXT I
380 REM ** READ IN DATA STATEMENTS
390 INPUT #2, NE, NN, PS
400 IF NE > EX THEN PRINT "TOO MANY ELEMENTS...>",EX : GOTO 2510
410 IF NN > NX THEN PRINT "TOO MANY NODES...>",NX : GOTO 2510
420 IP = 3 : GOSUB 50060
430 P$ = "          ****** DATA INPUT ******" : GOSUB 50000
440 IP = 2 : GOSUB 50060
450 P$ = "NUMBER OF ELEMENTS = " + STR$(NE) : GOSUB 50000
460 P$ = "NUMBER OF NODES    = " + STR$(NN) : GOSUB 50000
470 GOSUB 50040
480 P1$ = "PLANE STRESS CONDITIONS APPLY"
490 P2$ = "PLANE STRAIN CONDITIONS APPLY"
500 IF PS <>2 THEN PS=1 : P$ = P1$ : GOSUB 50000 : IP = 2 : GOSUB 50060
510 IF PS = 2 THEN P$ = P2$ : GOSUB 50000 : IP = 3 : GOSUB 50060
520 P$ = "*** NODAL DATA ***" : GOSUB 50000 : IP = 4 : GOSUB 50060
530 P$ = "NODE        COORDINATES          "
540 P$ = P$ + "RESTRAINTS       APPLIED FORCES" : GOSUB 50000
550 GOSUB 50040
560 P$ = " NO        X          Y           U"
570 P$ = P$ + "      V        PX         PY" : GOSUB 50000
580 FOR I = 1 TO NN
590 INPUT #2, N,X(N),Y(N),RE(N,1),RE(N,2),P(2*N - 1),P(2*N)
600 XA = N : GOSUB 30000 : P$ = XA$ + "    "
610 XS = X(I) : FW = 11 : NS = 3 : GOSUB 10040 : P$ = P$ + XS$
620 XS = Y(I) : GOSUB 10040 : P$ = P$ + XS$ + "   "
630 XA = RE(I,1) : GOSUB 30000 : P$ = P$ + XA$ + "    "
640 XA = RE(I,2) : GOSUB 30000 : P$ = P$ + XA$ + "     "
650 XS = P(2*I - 1) : GOSUB 10040 : P$ = P$ + XS$
660 XS = P(2*I) : GOSUB 10040 : P$ = P$ + XS$ : GOSUB 50000
670 NEXT I : GOSUB 50040
680 IP = 4 : GOSUB 50060 : P$ = "*** ELEMENT DATA ***" : GOSUB 50000
690 IP = 3 : GOSUB 50060
700 P$ = "ELEMENT   NODES   THICKNESS      ELASTIC   POISSON'S"
710 GOSUB 50000
720 P$ = "  NO     1  2  3                 MODULUS     RATIO"
730 GOSUB 50100
740 FOR I = 1 TO NE
750 INPUT #2, N,NJ(N,1),NJ(N,2),NJ(N,3),T(N),E(N),NU(N)
760 XA = N : GOSUB 30000 : P$ = XA$ + "    "
770 XA = NJ(I,1) : GOSUB 30000 : P$ = P$ + XA$
780 XA = NJ(I,2) : GOSUB 30000 : P$ = P$ + XA$
790 XA = NJ(I,3) : GOSUB 30000 : P$ = P$ + XA$ + "  "
800 XS = T(I) : GOSUB 10000 : P$ = P$ + XS$
810 XS = E(I) : GOSUB 10000 : P$ = P$ + XS$
820 XS = NU(I) : GOSUB 10000 : P$ = P$ + XS$ : GOSUB 50000
830 NEXT I
840 GOSUB 50140
850 PRINT "             PROGRAM "; PN$; " IS NOW RUNNING"
860 IP = 5 : GOSUB 50060
870 P$ = " IDENTIFIER : " + NA$ : GOSUB 50000
880 GOSUB 50040
890 P$ = "          ****** OUTPUT RESULTS ******" : GOSUB 50000
900 IN = 0 : FOR I = 1 TO NN : FOR J = 1 TO 2
910 IF RE(I,J) = 1 THEN 930
920 IN = IN + 1 : MN(I,J) = IN
930 NEXT J
940 NEXT I
950 REM  ** CONDENSED STRUCTURE STIFFNESS MATRIX
960 REM     IS MK X MK IN SIZE.                 **
970 MK = IN
980 REM   ** SCAN THROUGH ALL ELEMENTS          **
990 FOR IJK = 1 TO NE
1000 REM  ** DETERMINE CONSTITUTIVE MATRIX [D]
1010 REM     (DEPENDING ON PLANE STRESS OR STRAIN) **
1020 D(1,3) = 0 : D(2,3) = 0: D(3,1) = 0 : D(3,2) = 0
1030 IF PS = 2 THEN GOTO 1090
1040 U = E(IJK)/(1-NU(IJK)^2)
1050 D(1,1) = U : D(2,2) = U
1060 D(2,1) = NU(IJK)*U : D(1,2) = NU(IJK)*U
1070 D(3,3) = E(IJK) / 2 / (1 + NU(IJK))
1080 GOTO 1130
1090 U = E(IJK)*(1-NU(IJK))/(1+NU(IJK))/(1-2*NU(IJK))
1100 D(1,1) = U : D(2,2) = U : D(1,2) = NU(IJK)*U/(1-NU(IJK))
1110 D(2,1) = NU(IJK)*U/(1-NU(IJK)) : D(3,3) = E(IJK)/2/(1+NU(IJK))
1120 REM ** INITIALIZE MATRICES
1130 FOR I = 1 TO 6 : FOR J = 1 TO 6
1140 KL(I,J) = 0 : NEXT J
1150 FOR J = 1 TO 3 : B(J,I) = 0 : ST(IJK,J,I) = 0
1160 NEXT J : NEXT I
1170 REM   ** DETERMINE [B] MATRIX - NOT YET
1180 REM      DIVIDED THROUGH BY (2*AREA)         **
1190 N1 = NJ(IJK,1) : N2 = NJ(IJK,2) : N3 = NJ(IJK,3)
1200 X1 = X(N1) : X2 = X(N2) : X3 = X(N3)
1210 Y1 = Y(N1) : Y2 = Y(N2) : Y3 = Y(N3)
1220 AR = 0.5*(Y1*X3 - Y3*X1 + Y3*X2 - Y2*X3 + Y2*X1 - Y1*X2)
1230 A1 = X3 - X2 : A2 = X1 - X3 : A3 = X2 - X1
1240 B1 = Y2 - Y3 : B2 = Y3 - Y1 : B3 = Y1 - Y2
1250 B(1,1) = B1 : B(1,3) = B2 : B(1,5) = B3
1260 B(2,2) = A1 : B(2,4) = A2 : B(2,6) = A3
1270 B(3,1) = A1 : B(3,3) = A2 : B(3,5) = A3
1280 B(3,2) = B1 : B(3,4) = B2 : B(3,6) = B3
1290 REM   **  DETERMINE PRODUCT 0.5/A*[D][B] AND STORE
1300 REM       IN [ST] FOR FUTURE STRESS EVALUATION **
1310 FOR I = 1 TO 3 : FOR J = 1 TO 6 : FOR K = 1 TO 3
1320 ST(IJK,I,J) = ST(IJK,I,J) + D(I,K)*0.5/AR*B(K,J)
1330 NEXT K : NEXT J : NEXT I
1340 REM   **  DETERMINE ELEMENT STIFFNESS MATRIX [KL]
1350 REM       AND STORE AS [KH].                      **
1360 FOR I = 1 TO 6 : FOR J = 1 TO 6 : FOR K = 1 TO 3
1370 KL(I,J) = KL(I,J) + T(IJK)/2*B(K,I)*ST(IJK,K,J)
1380 NEXT K : KH(IJK,I,J) = KL(I,J) : NEXT J : NEXT I
1390 REM   **  DEPENDING ON BOUNDARY CONDITIONS,
1400 REM       STORE STIFFNESS COEFFICIENTS INTO
1410 REM       STRUCTURE CONDENSED MATRIX [KS].        **
1420 FOR I = 1 TO 3 : ND = NJ(IJK,I) : IS = 2*I - 1
1430 FOR L = 1 TO 2 : IF RE(ND,L) = 1 THEN 1510
1440 PK = MN(ND,L)
1450 FOR J = 1 TO 3 : JS = 2*J - 1 : NC = NJ(IJK,J)
1460 FOR M = 1 TO 2 : IF RE(NC,M) = 1 THEN 1490
1470 PL = MN(NC,M)
1480 KS(PK,PL) = KS(PK,PL) + KL(IS + L - 1,JS + M - 1)
1490 NEXT M
1500 NEXT J
1510 NEXT L
1520 NEXT I
1530 NEXT IJK
1540 REM   **  ASSEMBLE LOAD VECTOR AND THEN
1550 REM       CONDENSE IN [P].              **
1560 OT = 0 : FOR I = 1 TO NN : FOR J = 1 TO 2
1570 IF RE(I,J) = 0 THEN GOTO 1610
1580 FOR M = 2*I-(2-J)-OT TO 2*NN - OT - 1
1590 P(M) = P(M+1)
1600 NEXT M : OT = OT + 1
1610 NEXT J
1620 NEXT I
1630 REM   **  SOLVE FOR UNKNOWN NODAL DISPLACEMENTS
1640 REM        AND STORE IN [P].                    **
1650 M = 2*NN - OT : M1 = M - 1
1660 FOR I = 1 TO M1 : L = I + 1
1670 FOR J = L TO M
1680 IF KS(J,I) = 0 THEN GOTO 1730
1690 FOR KK = L TO M
1700 KS(J,KK) = KS(J,KK) - KS(I,KK)*KS(J,I)/KS(I,I)
1710 NEXT KK
1720 P(J) = P(J) - P(I)*KS(J,I)/KS(I,I)
1730 NEXT J
1740 NEXT I
1750 P(M) = P(M) / KS(M,M)
1760 FOR I = 1 TO M1 : KK = M - I : L = KK + 1
1770 FOR J = L TO M
1780 P(KK) = P(KK) - P(J) * KS(KK,J)
1790 NEXT J
1800 P(KK) = P(KK)/KS(KK,KK)
1810 NEXT I
1820 REM   **   ASSEMBLE ALL NODAL DISPLACEMENTS INTO [PH] **
1830 FOR I = 1 TO NF : PH(I) = 0
1840 NEXT I
1850 IN = 0 : FOR I = 1 TO NN : FOR J = 1 TO 2
1860 IF RE(I,J) = 1 THEN GOTO 1880
1870 IN = IN + 1 : PH(2*I - 2 + J) = P(IN)
1880 NEXT J
1890 NEXT I
1900 IP = 4 : GOSUB 50060
1910 P$ = "*** VECTOR OF ALL DISPLACEMENTS ***" : GOSUB 50000
1920 GOSUB 50040
1930 P$ = "NODE          DISPLACEMENTS" : GOSUB 50000
1940 P$ = " NO          U             V" : GOSUB 50100
1950 FW = 15 : NS = 3
1960 FOR I = 1 TO NN
1970 XA = I : GOSUB 30000 : P$ = XA$ + "  "
1980 XS = PH(2*I - 1) : GOSUB 10040 : P$ = P$ + XS$
1990 XS = PH(2*I) : GOSUB 10040 : P$ = P$ + XS$ : GOSUB 50000
2000 NEXT I
2010 REM   ** SCAN THROUGH ALL ELEMENTS AND
2020 REM      ESTABLISH ELEMENT DISPLACEMENT VECTOR
2030 REM      IN [P] AND MULTIPLY BY [ST] FROM
2040 REM      STORE TO GIVE ELEMENT STRESSES.       **
2050 GOSUB 50040 : P$ = "*** ELEMENT STRESSES ***" : GOSUB 50000
2060 IP = 2 : GOSUB 50060
2070 P$ = "ELEMENT             S T R E S S E S" : GOSUB 50000
2080 GOSUB 50040
2090 P$ = "  NO              SX       SY     TXY" : GOSUB 50000
2100 FOR IJK = 1 TO NE
2110 FOR I = 1 TO 3 : NB = NJ(IJK,I)
2120 FOR J = 1 TO 2
2130 P(2*I - 2 + J) = PH(2*NB - 2 + J)
2140 NEXT J : NEXT I
2150 P$ = "" : FOR I = 1 TO 3 : SS(I) = 0
2160 FOR J = 1 TO 6 : SS(I) = SS(I) + ST(IJK,I,J)*P(J) : NEXT J
2170 XS = SS(I) : GOSUB 10000 : P$ = P$ + XS$
2180 NEXT I
2190 XA = IJK : GOSUB 30000 : P$ = " " + XA$ + " " + P$ : GOSUB 50000
2200 NEXT IJK
2210 REM   ** BUILD UP UNCONDENSED STIFFNESS MATRIX
2220 REM      INTO [KS] AND MULTIPLY BY [PH] TO
2230 REM      FIND NODAL FORCES.                    **
2240 IP = 3 : GOSUB 50060
2250 FOR I = 1 TO NF : FOR J = 1 TO NF
2260 KS(I,J) = 0 : NEXT J : NEXT I
2270 FOR IJK = 1 TO NE
2280 FOR I = 1 TO 3 : I1 = 2*NJ(IJK,I) - 1 : IS = 2*I - 1
2290 FOR L = O TO 1
2300 FOR J = 1 TO 3 : J1 = 2*NJ(IJK,J) - 1 : JS = 2*J - 1
2310 FOR M = 0 TO 1
2320 KS(I1 + L,J1 + M) = KS(I1 + L, J1 + M) + KH(IJK,IS + L,JS + M)
2330 NEXT M : NEXT J : NEXT L : NEXT I : NEXT IJK
2340 FOR I = 1 TO 2*NN : P(I) = 0
2350 FOR J = 1 TO 2*NN
2360 P(I) = P(I) + KS(I,J) * PH(J)
2370 NEXT J : NEXT I
2380 IP = 2 : GOSUB 50040
2390 P$ = "*** NODAL FORCES ***" : GOSUB 50100
2400 P$ = "NODE                NODAL FORCES" : GOSUB 50000
2410 P$ = " NO               PX            PY" : GOSUB 50000
2420 GOSUB 50040
2430 FW = 15 : NS = 3
2440 FOR I = 1 TO NN
2450 XA = I : GOSUB 30000 : P$ = XA$ + "       "
2460 XS = P(2*I - 1) : GOSUB 10040 : P$ = P$ + XS$
2470 XS = P(2*I) : GOSUB 10040 : P$ = P$ + XS$ : GOSUB 50000
2480 NEXT I
2490 GOSUB 50040
2500 PRINT "SOLUTION COMPLETED: INSPECT OR PRINT OUTPUT FILE " + PN$ + ".OUT"
2510 P$ = "       **** END OF RUN OF PROGRAM " + PN$ + " ****"
2520 GOSUB 50000 : IP = 5 : GOSUB 50060
2530 GOSUB 50130 : REM CLOSE PRINTER CHANNEL
2540 END
10000 REM	FORMATTING AND INPUT/OUTPUT
10004 REM		SUBROUTINES BY
10008 REM		D.A. PIRIE
10012 REM	DEPARTMENT OF AEROSPACE ENGINEERING
10016 REM		UNIVERSITY OF GLASGOW
10020 REM 		    SCOTLAND
10024 REM		   MAY 1989
10028 REM
10032 REM  **  FORMAT NUMBERICAL OUTPUT IN SCIENTIFIC NOTATION **
10036 FW = 12 : NS = 4 : REM DEFAULT VALUES
10040 WE = 1E-30 : REM ANYTHING SMALLER TAKEN AS ZERO
10050 XA = XS : GOSUB 30010 : XS$ = XA$
10060 KE = 0 : KE$ = "" : BL$ = "        " : B0$ = "00000000"
10070 F5 = FW - NS - 5 : N3 = NS + 3 : Z$ = "0." : AX = ABS(XS)
10080 IF AX < WE THEN XS$ = LEFT$(BL$,F5) + Z$ + LEFT$(BL$,N3) : GOTO 10130
10090 LX = LEN(XS$) : L3 = LX - 3 : XA = XS
10100 IF LX > 5 THEN IF MID$(XS$,L3,1) = "E" THEN GOSUB 10400
10110 IF ABS(XS) < 1 OR ABS(XS) >= 10 THEN GOSUB 10240
10120 GOSUB 10140
10130 RETURN
10140 REM FORM OUTPUT$
10150 GOSUB 10200
10160 IF ABS(XS) >= 10 THEN GOSUB 10240
10170 GOSUB 10280
10180 GOSUB 10330
10190 RETURN
10200 REM ROUNDOFF MANTISSA
10210 XR = 5 : FOR I5 = 1 TO NS : XR = XR/10 : NEXT I5
10220 XS = XS + XR*SGN(XS)
10230 RETURN
10240 REM NORMALISE MANTISSA
10250 IF ABS(XS) < 1 THEN XS = XS*10 : KE = KE - 1 : GOTO 10250
10260 IF ABS(XS) >= 10 THEN XS = XS/10 : KE = KE + 1 : GOTO 10260
10270 RETURN
10280 REM FORM EXPONENT$
10290 S$ = "+" : IF KE < 0 THEN S$ = "-"
10300 XA = KE : GOSUB 30010 : KE$ = XA$
10310 KE$ = S$ + RIGHT$("0"+MID$(KE$,2),2)
10320 RETURN
10330 REM FORM(MANTISSA + EXPONENT)$
10340 XA = XS : GOSUB 30010 : XS$ = XA$
10350 X1$ = LEFT$(XS$,NS+2)
10360 XS$ = X1$ : IF LEN(X1$)<NS+2 THEN XS$ = X1$ + LEFT$(B0$,NS+2-LEN(X1$))
10370 IF XS = INT(XS) THEN XS$ = X1$ + "." + LEFT$(B0$,NS-1)
10380 XS$ = LEFT$(BL$,FW-NS-6) + XS$ + "E" + KE$
10390 RETURN
10400 REM
10410 KE = VAL(RIGHT$(XS$,3)) : XS = VAL(LEFT$(XS$,LEN(XS$)-4)) : RETURN
10420 REM
20000 REM   **  FORMAT NUMERICAL OUTPUT             **
20010 REM
20020 REM
20030 FW = 12 : NS = 3 : REM DEFAULT VALUES
20040 BL$ = "                  "
20050 IF FW - NS < 7 THEN PRINT "FIELD WIDTH TOO SMALL OR TOO MANY SIGFIGS"
20060 XE$ = "      " : XA = XS : GOSUB 30010 : XS$ = XA$
20070 IF ABS(XS) >= 10^(8-NS) THEN XX = XS : GOTO 20090
20080 GOSUB 20210
20090 IF LEN(XS$) > 5 THEN IF MID$(XS$,LEN(XS$)-3,1) = "E" THEN GOSUB 20190
20100 XA = XX : GOSUB 30010 : XX$ = XA$
20110 FOR J5 = 1 TO LEN(XX$)
20120 IF MID$(XX$,J5,1) = "." THEN DP = J5 : GOTO 20140
20130 NEXT J5 : DP = LEN(XX$) + 1 : XX$ = XX$ + "."
20140 XX$ = XX$ + "0000000" : XS$ = LEFT$(XX$,DP + NS) + XE$
20150 LX = LEN(XS$) : IF LX >= FW THEN XS$ = " " + LEFT$(XS$, FW-1) : GOTO 20170
20160 XS$ = LEFT$(BL$,FW - LX) + XS$
20170 RETURN
20180 REM SEPARATE MANTISSA, EXPONENT$
20190 XE$ = RIGHT$(XS$,4) : XS = VAL(LEFT$(XS$,LEN(XS$) - 4))
20200 GOSUB 20210 : RETURN
20210 REM ROUND-OFF TO NS DECIMAL PLACES
20220 XX = XS + 0.5*SGN(XS)/10^NS : RETURN
30000 GOSUB 30010 : GOSUB 30060 : RETURN
30010 REM  * FIX FOR BASICS(EG APPLE) WHICH STRIP LEADING BLANK FROM
30020 REM    STR$(NON-NEGATIVE NUMBER) *
30030 XA$ = STR$(XA) : X1$ = LEFT$(XA$,1)
30040 IF X1$ <> " " AND X1$ <> "-" THEN XA$ = " " + XA$
30050 RETURN
30060 REM  * RIGHT-JUSTIFY INTEGERS <= 99
30070 XA$ = RIGHT$(" " + XA$,3)
30080 RETURN
30090 REM *******************************************
50000 REM ** THE FOLLOWING STATEMENTS
50010 REM    ARE SPECIFIC TO MS-DOS
50020 REM        TURBO BASIC                       **
50030 PRINT #3, P$ : RETURN : REM ** PRINTLINE ON OUTPUTFILE **
50040 PRINT #3, : RETURN : REM ** 1 NEWLINE ON OUTPUTFILE **
50050 REM
50060 FOR KP = 1 TO IP : REM * DO IP
50070 PRINT #3, : REM    NEWLINES
50080 NEXT KP : REM      ON
50090 RETURN  : REM      OUTPUT FILE *
50100 GOSUB 50000 : GOSUB 50040 : RETURN : REM ** PRINTLINE + NEWLINE **
50110 OPEN PN$ + ".IN" FOR INPUT AS #2 : RETURN : REM ** OPEN INFILE **
50120 OPEN PN$ + ".OUT" FOR OUTPUT AS #3 : RETURN : REM ** OPEN OUTFILE **
50130 CLOSE #2,#3 : RETURN : REM CLOSE INFILE & OUTFILE
50140 CLS : RETURN : REM CLEARSCREEN



